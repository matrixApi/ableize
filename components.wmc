my/communication:
    documents:
        usage:
            service: $.my.communication.messaging.streamChunk(session, frameOfVideo)
            client: $.my.communication.client.application(session)
            portal::
                %doJavascriptCore('my/communication/javascript/library')
                %doJavascriptCore('my/communication/javascript/cats/stream')

        native::
            @apply
            class _native:
                from xmlrpclib import dumps, loads

                def xmlrpc(function):
                    def build(*args, **kwd):
                        return loads(function(dumps(args, **kwd)))

                    return build

            post = native(_native.xmlrpc(action(jQuery.post, '/rpc/session.command')))
            slashing = native('/'.join)


            # @accessible
            # @native
            # class javascriptCore(list):
            #     def __repr__(self):
            #         return post(slashing(self))


    messaging::
        data = structure('my/communication/javascript').cats.message

        def streamChunk(session, message):
            message = mapping(['content', message])
            message = mapping(['message', message])
            return session.postJavascript(data, message)


    interfaces:
        client::
            javascriptCore($accessible):
                base: list
                repr$($method)::
                    with $.my.communication.native:
                        return .post(.slashing(instance))


            application($method):
                parameters: [session]
                code::
                    with document.javascriptCore.communication.javascript:
                        with session.javascript as js:
                            js += `.library`
                            js += `.cats.stream`


        javascript::
            library($view)::
                // Define the feed video component.
                com$('my/feed/video', 'stream',
                     {init: function (previous)
                      { window.video = {}; },

                      add: function (name, callback)
                      { window.video[name] = function (frame)
                        { return callback(name); } });

            cats:
                documentation::
                    The streaming server sends these messages, which also embed
                    the video frame or chunk data into the message binding.

                    Because the design of the video streaming component is to
                    basically delegate the handling of all incoming data such that
                    a richly-programmed user client can provide strong interaction
                    with content, the client-side streaming opening code specifies
                    this actual interaction while the server pumps prepared messages.

                message: video.iAmInLoveWithCats(message.content);

                stream($view)::
                    // Open a stream...
                    com('my/feed/video', 'stream')
                        .add('iAmInLoveWithCats',
                             function (name)
                             { });


example:
    authorization::
        documentation::
            The purpose being to create an function that asserts ownership of a particular
            asset, and also authorization of a hardcoded secret for the financial object
            before calling a particular action.  Then it deploys it as a client application
            component with a graphical interface.


        secret$: structure($.secure.keySequence).afad9a69767e7c24ecda5af9187202e1b4b070b2

        stake = $.components.financial.stake

        def init$(asset, action):
            .call$ = stake$call:
                condition:
                    own$: sha1(asset)

                consequence$:
                    stake$call:
                        consequence$: action
                        condition:
                            secret$: secret


        application:
            protectedAction($method):
                parameters: [keyword, action, verb]
                code::
                    action = .location.contents[keyword: keyword]
                    action = action.interface.commands[action]

                    .interface.commands[verb] = $command:
                        implementation$: $.authorization(keyword, action)
                        verb$: verb


            service($view):
                formation: clientApplication('/page/example/authorization/application/service')

                context($trigger)::
                    shortate$call::
                        $ example authorization application protectedAction
                            'watering hole'
                            'drink'
                            'hydrate'

                    response.html$call:
                        $html:
                            button:
                                caption: Hydrate from Protected Watering Hole
                                click: evaluateScript('.interface.commands.hydrate()')
