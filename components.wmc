my/communication:
    documents:
        usage:
            service: $.my.communication.messaging.streamChunk(session, frameOfVideo)
            client: $.my.communication.client.application(session)
            portal::
                %doJavascriptCore('my/communication/javascript/library')
                %doJavascriptCore('my/communication/javascript/cats/stream')

        native::
            @apply
            class _native:
                from xmlrpclib import dumps, loads

                def xmlrpc(function):
                    def build(*args, **kwd):
                        return loads(function(dumps(args, **kwd)))

                    return build

            post = native(_native.xmlrpc(action(jQuery.post, '/rpc/session.command')))
            slashing = native('/'.join)


            # @accessible
            # @native
            # class javascriptCore(list):
            #     def __repr__(self):
            #         return post(slashing(self))


    messaging::
        data = structure('my/communication/javascript').cats.message

        def streamChunk(session, message):
            message = mapping(['content', message])
            message = mapping(['message', message])
            return session.postJavascript(data, message)


    interfaces:
        client::
            javascriptCore($accessible):
                base: list
                repr$($method)::
                    with $.my.communication.native:
                        return .post(.slashing(instance))


            application($method):
                parameters: [session]
                code::
                    with document.javascriptCore.communication.javascript:
                        with session.javascript as js:
                            js += `.library`
                            js += `.cats.stream`


        javascript::
            library($view)::
                // Define the feed video component.
                com$('my/feed/video', 'stream',
                     {init: function (previous)
                      { window.video = {}; },

                      add: function (name, callback)
                      { window.video[name] = function (frame)
                        { return callback(name); } });

            cats:
                documentation::
                    The streaming server sends these messages, which also embed
                    the video frame or chunk data into the message binding.

                    Because the design of the video streaming component is to
                    basically delegate the handling of all incoming data such that
                    a richly-programmed user client can provide strong interaction
                    with content, the client-side streaming opening code specifies
                    this actual interaction while the server pumps prepared messages.

                message: video.iAmInLoveWithCats(message.content);

                stream($view)::
                    // Open a stream...
                    com('my/feed/video', 'stream')
                        .add('iAmInLoveWithCats',
                             function (name)
                             { });


example:
    authorization::
        documentation::
            The purpose being to create an function that asserts ownership of a particular
            asset, and also authorization of a hardcoded secret for the financial object
            before calling a particular action.  Then it deploys it as a client application
            component with a graphical interface.


        secret$: structure($.secure.keySequence).afad9a69767e7c24ecda5af9187202e1b4b070b2

        stake = $.components.financial.stake

        def init$(asset, action):
            .call$ = stake$call:
                condition:
                    own$: sha1(asset)

                consequence$:
                    stake$call:
                        consequence$: action
                        condition:
                            secret$: secret


        application:
            protectedAction($method):
                parameters: [keyword, action, verb]
                code::
                    action = .location.contents[keyword: keyword]
                    action = action.interface.commands[action]

                    .interface.commands[verb] = $command:
                        implementation$: $.authorization(keyword, action)
                        verb$: verb


            service($view):
                formation: clientApplication('/page/example/authorization/application/service')

                context($trigger)::
                    shortate$call::
                        $ example authorization application protectedAction
                            'watering hole'
                            'drink'
                            'hydrate'

                    response.html$call:
                        $html:
                            button:
                                caption: Hydrate from Protected Watering Hole
                                click: evaluateScript('.interface.commands.hydrate()')


document-server::
    from SocketServer import ThreadingTCPServer, StreamRequestHandler
    from Queue import Queue

    from ph.runtime.facilities import Facility

    class RPCDocumentServer(ThreadingTCPServer):
        '''
        [Components]
        rpc.document.server = net.stuphos.services.RPCDocumentServer.Component

        my/document:
            documents:
                usage::
                    $.my.document.producer.localControl \
                        (32501, source($.my.documents.content))

                content::
                    <document>
                        <script name="primary" type="text/lephton">
                        node = document.dom.createTextElement('')
                        document.dom.getElementById('main').appendChild(node)
                        </script>

                        <main id="main" />
                        </document>

            producer::
                cntlr = $.system.component['RPC::Document::Controller']

                def localControl(port, document):
                    peer = cntrl[['127.0.0.1', port]]
                    peer(document)

                    '''

        class Component(Facility):
            '''
            In background, open new background threads for each incoming
            connection, and also associate connections with channels for
            transmitting documents through the secure library interface.

            '''

            NAME = 'RPC::Document::Controller'

            def __init__(self, server):
                self.server = RPCDocumentServer(8040)
                self.native = self.nativeInterface(self)
                nth(self.server.serve_forever)

            class nativeInterface:
                def __init__(self, component):
                    self._component = component

                def __iter__(self):
                    return (self._connection(self, key) for key in
                            self._component.server.keyConnections)

                def __getitem__(self, key):
                    return self._connection(self, key)

                class _connection:
                    def __init__(self, interface, key):
                        self._interface = interface
                        self._key = key

                    def post(self, message):
                        task = runtime[runtime.System.Machine].contextObject.task
                        task.checkAccess(['system:rpc-document', self._key], 'write')

                        return self._interface._component.server \
                               .postMessage(self._key, message)
                    __call__ = post


        def __init__(self, port):
            self.connections = dict()
            ThreadingTCPServer.__init__(self, ('127.0.0.1', port),
                                        self.requestHandler)

        def stopConnection(self, key):
            return self.connections[key].stop()

        def postMessage(self, key, message):
            self.connections[key].post(message)
        __setitem__ = postMessage

        @property
        def keyConnections(self):
            return self.connections.iterkeys()


        class requestHandler(StreamRequestHandler):
            def __init__(self, request, client_address, server):
                self.queue = Queue()
                server.connections[client_address] = self
                StreamRequestHandler.__init__(self, request, client_address, server)

            def handle(self):
                # This is in a parallel thread.
                while True:
                    message = self.queue.get()

                    if isinstance(message, StopIteration):
                        break

                    self.dispatch(message)

            def post(self, message):
                self.queue.put(message)
                return self

            def stop(self):
                return self.post(StopIteration)

            def dispatch(self, message):
                # The protocol for handling a message is to just stream it.
                self.wfile.write(str(message))


product-component:
    description: 1st-person tactical interface
    source: 'https://minirts.org'

    implementation::
        provisioning.rts($package)::
            '''
            This repurposes the strategical instructive generator model
            for a single-unit executive avatar session.

            '''

            from receptacle.client import remote as protocol
            from phClient import messaging

            # The MiniRTS Torch Models.
            system.path += my.path.minirts.scripts.behaviour_clone

            from executor import Executor
            from instruction_generator \
                import (LanguageGenerator,
                        RnnLanguageGenerator)


            class avatar:
                'Neuronal model centralizing entity behaviour.'

                # provide methods that operate the nn for the
                # remoting interface.

                @protocol.operator(messaging)
                class api:
                    # Interactive remote session object.
                    pass


cognition/discriminative:
    documents/documentation::
        Because the channel represents a remote determination,
        it is possible that a step, in a process, can either
        block, or, join with the process later, upon remote
        response.

        The step's delegated method is the thing that can join
        with the process later, because this operation and the
        channel are parameters to the method.


    operation::
        def call$(channel, instructions):
            for step in instructions:
                step.response(., channel)

    step::
        documentation: A way of synchronizing a method with a channel.

        def init$(asynchronous, method)
            .asynchronous = asynchronous
            .method = method

        def response(operation, channel):
            if .asynchronous:
                return parallel(.responseMethod, operation, channel)
            else:
                return .responseMethod(operation, channel)

        def responseMethod(operation, channel):
            # Supposedly the channel could synchronize instead
            # of using this explicitly parallelized routine.
            response = channel.messageSynchronous(.)
            return .method(., operation, channel, response)


    thought/singular::
        usage::
            When operation is done processing instruction steps,
            alternative considerations are no longer included
            in the product value, which can be returned.

            The operational task seeks to consider contemplation
            by waiting on the communication channel, which will
            signal for a conclusion.  This just represents some
            kind of foreground processing that might be happening
            while other calculations are being made in parallel.

            Now, as a concept, a contemplative operational task
            can cause an alternative consideration to the product,
            while conscious activity continues.  The alternative
            is caused by the basic unit of operation, although
            it might yield unpredictable results.


        super = extend($.operation)

        def init$():
            super.init$(.)
            .channel = $.services.channel()

            try: return arguments[0] and .call$()
            except: pass


        def call$():
            return super.call$(., channel,
                               [..step(false, .initialConsiderations),
                                ..step(true, .alternativeConsiderations),
                                ..step(false, .passiveContemplations)])


        def initialConsiderations(step, operation, channel, response):
            channel.post('the product of the numbers has a particular value')
            operation.value = [10]
            operation.conclude = false

        def alternativeConsiderations(step, operation, channel, response):
            while not operation.conclude:
                message = $.network.generic.stream() # Attach to some live stream.

                if not message:
                    break

                if message.semantic == 'challenges the product of the numbers':
                    channel.post('challenge to product')
                    operation.value.append(message.value)

        def passiveContemplations(step, operation, channel, response):
            message = channel.get()
            if message.semantic == 'suggest conclusion':
                operation.conclude = true


interfaces/strategy::
    Matrix move bounce off invisible wall with machinegun slung around shoulder and withdraw
    the katana bring it down into a human-splitting slice the other defense.  And, third arm
    brings around ball from back and waves it over endzone post.
    ...

